<canvas id="canvas" width="960" height="450"></canvas>
<h3 class='snake score'>Current score: <span id='current_score'>0</span></h3>
<h3 class="snake score">Time remaining: <span class='timer'>0</span></h3>
<h3 class='snake score'>Your highest score: <span id='high_score'><%= current_user.snake_score.try(:score) if current_user %></span></h3>

<script>
$(document).ready(function() {
var snakeApp = snakeApp || {};
var run;
snakeApp.length = 5;
snakeApp.cellWidth = 15;
snakeApp.canvas, snakeApp.ctx, snakeApp.gameWidth, snakeApp.gameHeight, snakeApp.food, snakeApp.snake, snakeApp.state, snakeApp.frameRate, snakeApp.timer;

snakeApp.reset = function() {
    snakeApp.frameRate = 1000 / 12;
    snakeApp.setTimer();
    snakeApp.direction = "right";
    snakeApp.curr_direction = "right";
    snakeApp.newSnake();
    snakeApp.score = 0;
    snakeApp.ctx.clearRect(0, 0, snakeApp.canvas.width, snakeApp.canvas.height);
    snakeApp.ctx.font = "bold 20px 'Press Start 2P'";
    snakeApp.ctx.textAlign = "center";
    snakeApp.ctx.textBaseline = 'middle';
    snakeApp.ctx.fillText("Press SPACE to start.", 480, 200);
    snakeApp.state = 'welcome';
};

// .snake contains an array of objects. Each snake body cell is an array object with a x, y coordinate.

snakeApp.newSnake = function() {
  var arr = [];
  for (var i = snakeApp.length-1; i >= 0; i--) {
    arr.push({x: i, y: 0})
  }
  snakeApp.snake = arr;
};

snakeApp.snakeMove = function() {
  
  snakeApp.timer -= snakeApp.frameRate;
  var nextHead = {};
  nextHead.x = snakeApp.snake[0].x;
  nextHead.y = snakeApp.snake[0].y;

  if(snakeApp.direction == "right") nextHead.x = (nextHead.x+1) % snakeApp.gameWidth;
  else if(snakeApp.direction == "left") { if (nextHead.x-- <= 0) nextHead.x = snakeApp.gameWidth - 1 ;}
  else if(snakeApp.direction == "up") { if (nextHead.y-- <= 0) nextHead.y = snakeApp.gameHeight - 1 ;}
  else if(snakeApp.direction == "down") nextHead.y = (nextHead.y+1) % snakeApp.gameHeight;
  snakeApp.checkForCollision(nextHead);
  if (snakeApp.hasEatenFood(nextHead)) {
    snakeApp.updateScore();
    snakeApp.makeFood();
    snakeApp.setTimer();
  } else if (snakeApp.timer < 0) {
    snakeApp.gameOver();
  } else {
    snakeApp.snake.pop();
  }
  snakeApp.snake.unshift(nextHead);
  snakeApp.curr_direction = snakeApp.direction

  $('.timer').text(snakeApp.timeInSeconds());
};

snakeApp.draw = function () {
  snakeApp.ctx.clearRect(0, 0, snakeApp.canvas.width, snakeApp.canvas.height);

  $(snakeApp.snake).each(function(i,cell) {
    snakeApp.paintCell(cell.x * snakeApp.cellWidth, cell.y * snakeApp.cellWidth);
  })

  snakeApp.paintCell(snakeApp.food.x * snakeApp.cellWidth, snakeApp.food.y * snakeApp.cellWidth, "#699C9E");
  $('#current_score').text(snakeApp.score);

};

snakeApp.timeInSeconds = function() {
  return Math.ceil(snakeApp.timer/1000);
}

snakeApp.paintCell = function(x, y, color) {
  if (color) {
  snakeApp.ctx.fillStyle = color;
} else {
    snakeApp.ctx.fillStyle = '#333';
}
  snakeApp.ctx.fillRect(x, y, snakeApp.cellWidth, snakeApp.cellWidth);
  snakeApp.ctx.strokeStyle = '#eee';
  snakeApp.ctx.strokeRect(x, y, snakeApp.cellWidth, snakeApp.cellWidth);
}

snakeApp.gameLoop = function() {
  if (!snakeApp.food) snakeApp.makeFood();
  snakeApp.draw();
  snakeApp.snakeMove();
}

snakeApp.checkForCollision = function(head) {
  $(snakeApp.snake).each(function(i,cell) {
    if (head.x == cell.x && head.y == cell.y) {
    snakeApp.gameOver();
    
    $.ajax({
      url: '/snakes/create',
      dataType: 'json',
      type: 'post',
      data: {score: snakeApp.score},
      success: function(data) {
        $('#high_score').text(data.score)
      }
    });

   }
  });
};

snakeApp.gameOver = function () {
    clearInterval(run);
    snakeApp.state = 'gameover';
    snakeApp.ctx.font = "bold 60px 'Press Start 2P'";
    snakeApp.ctx.textAlign = "center";
    snakeApp.ctx.textBaseline = 'middle';
    snakeApp.ctx.fillText("GAME OVER", 480, 200);
};

snakeApp.hasEatenFood = function(head) {
  return snakeApp.food.x == head.x && snakeApp.food.y == head.y;
};

snakeApp.makeFood = function() {
  snakeApp.food = {
    x: Math.round(Math.random()*(snakeApp.gameWidth-1) ), 
    y: Math.round(Math.random()*(snakeApp.gameHeight-1) ), 
  };
};

snakeApp.updateScore = function() {
  snakeApp.score += snakeApp.timeInSeconds();
};

snakeApp.setTimer = function() {
  snakeApp.timer = 10000;
};


snakeApp.play = function() {
  snakeApp.state = 'playing';
  run = setInterval(snakeApp.gameLoop, snakeApp.frameRate);
};

snakeApp.canvas = $('#canvas')[0];
if (snakeApp.canvas) {
snakeApp.ctx = snakeApp.canvas.getContext('2d');
snakeApp.ctx.font = 'Press Start 2P';
snakeApp.gameWidth = snakeApp.canvas.width / snakeApp.cellWidth;
snakeApp.gameHeight = snakeApp.canvas.height / snakeApp.cellWidth;
snakeApp.reset();
}

$(document).keydown(function(e){
  var key = e.which;
  if(key == "37" && snakeApp.curr_direction != "right" && snakeApp.state == 'playing') {
    snakeApp.direction = "left";
  } else if(key == "38" && snakeApp.curr_direction != "down" && snakeApp.state == 'playing') { 
    snakeApp.direction = "up";
  } else if(key == "39" && snakeApp.curr_direction != "left" && snakeApp.state == 'playing') {
    snakeApp.direction = "right";
  } else if(key == "40" && snakeApp.curr_direction != "up" && snakeApp.state == 'playing') {
    snakeApp.direction = "down";
  } else if (key == "32" && snakeApp.state == 'welcome') {
    snakeApp.play();
  } else if (key == "32" && snakeApp.state == 'gameover') {
    snakeApp.reset();
  }
})

});
</script>